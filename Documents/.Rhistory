library(readr)
Moroccan_All_Shares_Données_Historiques <- read_csv("C:/Users/LENOVO/Desktop/Risk-based-solvency/Application Bs4/Data/Moroccan All Shares - Données Historiques.csv")
View(Moroccan_All_Shares_Données_Historiques)
library(readxl)
TriangleRgle <- read_excel("C:/Users/LENOVO/Desktop/Risk-based-solvency/Application Bs4/Data/TriangleRgle.xlsx")
TriangleRgle.colums
TriangleRgle.names
TriangleRgle.
library(readr)
df <- read_csv("C:/Users/LENOVO/Desktop/Risk-based-solvency/Application Bs4/Data/Moroccan All Shares - Données Historiques.csv")
View(Moroccan_All_Shares_Données_Historiques)
data <- read_csv("C:/Users/LENOVO/Desktop/Risk-based-solvency/Application Bs4/Data/Moroccan All Shares - Données Historiques.csv")
View(data)
print(data)
data
data
data <- subset(data, select = -Vol)
data$Vol.
data <- subset(data, select = -Vol.)
data
format_value <- function(value) {
# Remplacer la virgule par un point décimal
value <- gsub(",", ".", value, fixed = TRUE)
# Supprimer les espaces
value <- gsub(" ", "", value, fixed = TRUE)
# Insérer un espace avant le dernier point décimal
value <- gsub("(\\d)(\\.(\\d{3}))", "\\1 \\3", value)
return(value)
}
# Appliquer le formatage aux valeurs de toutes les colonnes
data <- as.data.frame(lapply(data, format_value), stringsAsFactors = FALSE)
data
data$Ouv. = Ouverture
data$Ouv. = "Ouverture"
data
data.head()
data.head
data["Ouv."] = "Ouverture"
data
data= rename
rename()
colnames(data)['Ouv.'] <- 'Ouverture'
data
names(data)['Ouv.'] <- 'Ouverture'
data$Ouv.
data
data <- read_csv("C:/Users/LENOVO/Desktop/Risk-based-solvency/Application Bs4/Data/Moroccan All Shares - Données Historiques.csv")
data
# Appliquer le formatage aux valeurs de toutes les colonnes
data <- as.data.frame(lapply(data, format_value), stringsAsFactors = FALSE)
data
format_value <- function(value) {
# Remplacer la virgule par un point décimal
value <- gsub(",", ".", value, fixed = TRUE)
# Supprimer les espaces
value <- gsub(" ", "", value, fixed = TRUE)
return(value)
}
data <- read_csv("C:/Users/LENOVO/Desktop/Risk-based-solvency/Application Bs4/Data/Moroccan All Shares - Données Historiques.csv")
format_value <- function(value) {
# Remplacer la virgule par un point décimal
value <- gsub(",", ".", value, fixed = TRUE)
# Supprimer les espaces
value <- gsub(" ", "", value, fixed = TRUE)
return(value)
}
# Appliquer le formatage aux valeurs de toutes les colonnes
data <- as.data.frame(lapply(data, format_value), stringsAsFactors = FALSE)
data
format_value <- function(value) {
# Remplacer la virgule par un point décimal
value <- gsub(",", ".", value, fixed = TRUE)
# Supprimer les espaces
value <- gsub(" ", "", value, fixed = TRUE)
# Insérer un espace avant le dernier point décimal
value <- gsub("(\\d)(\\.(\\d{3}))", "\\1 \\3", value)
return(value)
}
# Appliquer le formatage aux valeurs de toutes les colonnes
data <- as.data.frame(lapply(data, format_value), stringsAsFactors = FALSE)
data
format_value <- function(value) {
# Remplacer la virgule par un point décimal
#value <- gsub(",", ".", value, fixed = TRUE)
# Supprimer les espaces
value <- gsub(" ", "", value, fixed = TRUE)
# Insérer un espace avant le dernier point décimal
value <- gsub("(\\d)(\\.(\\d{3}))", "\\1 \\3", value)
return(value)
}
data <- read_csv("C:/Users/LENOVO/Desktop/Risk-based-solvency/Application Bs4/Data/Moroccan All Shares - Données Historiques.csv")
data
format_value <- function(value) {
# Remplacer la virgule par un point décimal
#value <- gsub(",", ".", value, fixed = TRUE)
# Supprimer les espaces
value <- gsub(" ", "", value, fixed = TRUE)
# Insérer un espace avant le dernier point décimal
value <- gsub("(\\d)(\\.(\\d{3}))", "\\1 \\3", value)
return(value)
}
# Appliquer le formatage aux valeurs de toutes les colonnes
data <- as.data.frame(lapply(data, format_value), stringsAsFactors = FALSE)
data
data <- read_csv("C:/Users/LENOVO/Desktop/Risk-based-solvency/Application Bs4/Data/Moroccan All Shares - Données Historiques.csv")
format_value <- function(value) {
# Remplacer la virgule par un point décimal
value <- gsub(",", ".", value, fixed = TRUE)
# Supprimer les espaces
#value <- gsub(" ", "", value, fixed = TRUE)
# Insérer un espace avant le dernier point décimal
value <- gsub("(\\d)(\\.(\\d{3}))", "\\1 \\3", value)
return(value)
}
# Appliquer le formatage aux valeurs de toutes les colonnes
data <- as.data.frame(lapply(data, format_value), stringsAsFactors = FALSE)
data
format_value <- function(value) {
# Remplacer la virgule par un point décimal
value <- gsub(",", ".", value, fixed = TRUE)
# Supprimer les espaces
#value <- gsub(" ", "", value, fixed = TRUE)
# Insérer un espace avant le dernier point décimal
#value <- gsub("(\\d)(\\.(\\d{3}))", "\\1 \\3", value)
return(value)
}
data <- read_csv("C:/Users/LENOVO/Desktop/Risk-based-solvency/Application Bs4/Data/Moroccan All Shares - Données Historiques.csv")
format_value <- function(value) {
# Remplacer la virgule par un point décimal
value <- gsub(",", ".", value, fixed = TRUE)
# Supprimer les espaces
#value <- gsub(" ", "", value, fixed = TRUE)
# Insérer un espace avant le dernier point décimal
#value <- gsub("(\\d)(\\.(\\d{3}))", "\\1 \\3", value)
return(value)
}
# Appliquer le formatage aux valeurs de toutes les colonnes
data <- as.data.frame(lapply(data, format_value), stringsAsFactors = FALSE)
data
data <- read_csv("C:/Users/LENOVO/Desktop/Risk-based-solvency/Application Bs4/Data/Moroccan All Shares - Données Historiques.csv")
format_value <- function(value) {
# Remplacer la virgule par un point décimal
#value <- gsub(",", ".", value, fixed = TRUE)
# Supprimer les espaces
#value <- gsub(" ", "", value, fixed = TRUE)
# Insérer un espace avant le dernier point décimal
#value <- gsub("(\\d)(\\.(\\d{3}))", "\\1 \\3", value)
return(value)
}
# Appliquer le formatage aux valeurs de toutes les colonnes
data <- as.data.frame(lapply(data, format_value), stringsAsFactors = FALSE)
data
data <- read_csv("C:/Users/LENOVO/Desktop/Risk-based-solvency/Application Bs4/Data/Moroccan All Shares - Données Historiques.csv")
data
format_value <- function(value) {
# Remplacer la virgule par un point décimal
value <- gsub(",", ".", value, fixed = TRUE)
# Supprimer les espaces
value <- gsub(" ", "", value, fixed = TRUE)
# Insérer un espace avant le dernier point décimal
value <- gsub("(\\d)(\\.(\\d{3}))", "\\1 \\3", value)
return(value)
}
data <- subset(data, select = -Vol.)
data
library(readxl)
masi_excel <- read_excel("C:/Users/LENOVO/Desktop/masi_excel.xlsx")
View(masi_excel)
shiny::runApp('C:/Users/LENOVO/Desktop/B&S_Shiny App_ELBOUHI_Ismail')
runApp('C:/Users/LENOVO/Desktop/B&S_Shiny App_ELBOUHI_Ismail')
runApp('C:/Users/LENOVO/Desktop/B&S_Shiny App_ELBOUHI_Ismail')
library(readxl)
masi <- read_excel("C:/Users/LENOVO/Desktop/Risk-based-solvency/Application Bs4/Data/masi.xlsx")
View(masi)
library(readxl)
masi <- read_excel("C:/Users/LENOVO/Desktop/Risk-based-solvency/Application Bs4/Data/masi.xlsx")
masi
library(readxl)
masi <- read_excel("C:/Users/LENOVO/Desktop/Risk-based-solvency/Application Bs4/Data/masi.xlsx")
masi
library(readxl)
masi <- read_excel("C:/Users/LENOVO/Desktop/Risk-based-solvency/Application Bs4/Data/masi.xlsx")
masi
library(kableExtra)
Ligne1 = c("Abréviation","SBR","ACAPS","AT","RNN","LSTM","MASI","CSR","BE","PPNA","PSAP","BAM","CSRB","CSRO","MR","EDS","GBM","OPCVM","OPCI","OPCC","FPCT")
Ligne2 = c("Désignation","Solvabilité Basée sur les risques","Autorité de contrôle des Assurances et de la Prévoyance Sociale","Accident de travail", "Réseaux de neurones récurrents", "Long short-term memory", "Moroccan All Shares index","Capital de Solvabilité Requis","Best Estimate","Provision pour primes non Acquises","Provision pour Sinistre à Payer","Bank Al Maghrib","Capital de solvabilité requis de base","Capital de solvabilité requis de base relative au risque Operationnel","Marge de Risque","Equation Différentielle Stochastique","Geometric Brownian Motion","Organisme de Placement Collectif en Valeurs Mobilières","Organisme de Placement Collectif Immobilier","Organismes de Placement Collectif en Capital","Fonds de Placement Collectifs en Titrisation")
tableau5 <- data.frame(Ligne1, Ligne2)
colnames(tableau5) = tableau5[1,]
tableau5 = tableau5[-1,]
rownames(tableau5) = NULL
tableau5 %>%
kbl() %>%
kable_material(c("striped"))
library(readxl)
library(kableExtra)
masi <- read_excel("C:/Users/LENOVO/Desktop/Risk-based-solvency/Application Bs4/Data/masi.xlsx")
masi%>%
kbl() %>%
kable_material(c("striped"))
library(readxl)
library(kableExtra)
masi <- read_excel("C:/Users/LENOVO/Desktop/Risk-based-solvency/Application Bs4/Data/masi.xlsx")
masi%>%
kbl() %>%
kable_material(c("striped"))
print(head(masi, 20))
library(readxl)
library(kableExtra)
library(knitr)
masi <- read_excel("C:/Users/LENOVO/Desktop/Risk-based-solvency/Application Bs4/Data/masi.xlsx")
masi%>%
kbl() %>%
kable_material(c("striped"))
kable(head(masi, 20))
library(readxl)
library(kableExtra)
masi <- read_excel("C:/Users/LENOVO/Desktop/Risk-based-solvency/Application Bs4/Data/masi.xlsx")
masi%>%
kbl() %>%
kable_material(c("striped"))
head(masi, 20)
beginCentering()
library(readxl)
library(kableExtra)
masi <- read_excel("C:/Users/LENOVO/Desktop/Risk-based-solvency/Application Bs4/Data/masi.xlsx")
masi <-masi%>%
kbl() %>%
kable_material(c("striped"))
head(masi, 20)
library(readxl)
library(kableExtra)
masi <- read_excel("C:/Users/LENOVO/Desktop/Risk-based-solvency/Application Bs4/Data/masi.xlsx")
#masi%>%
#kbl() %>%
#kable_material(c("striped"))
head(masi,20)
library(readxl)
library(kableExtra)
masi <- read_excel("C:/Users/LENOVO/Desktop/Risk-based-solvency/Application Bs4/Data/masi.xlsx")
masi%>%
kbl() %>%
kable_material(c("striped"))
library(readxl)
library(kableExtra)
masi <- read_excel("C:/Users/LENOVO/Desktop/Risk-based-solvency/Application Bs4/Data/masi.xlsx")
head(masi,20)%>%
kbl() %>%
kable_material(c("striped"))
library(readxl)
library(kableExtra)
masi <- read_excel("C:/Users/LENOVO/Desktop/Risk-based-solvency/Application Bs4/Data/masi.xlsx")
head(masi,12)%>%
kbl() %>%
kable_material(c("striped"))
library(readxl)
library(kableExtra)
masi <- read_excel("C:/Users/LENOVO/Desktop/Risk-based-solvency/Application Bs4/Data/masi.xlsx")
head(masi,5)%>%
kbl() %>%
kable_material(c("striped"))
